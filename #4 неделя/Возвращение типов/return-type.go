package main

import (
	"errors"
	"fmt"
)

func main() {
	numberOne := 13
	numberTwo := 5

	fmt.Println(oneType(numberOne, numberTwo))

	fmt.Println(sameTypes(numberOne, numberTwo))

	fmt.Println(multiTypes(13, 2))
}

// возвращение одного типа
func oneType(x, y int) int {
	s := (x + y) / 2
	return s + 2
}

// возвращение одинаковых типов
func sameTypes(x, y int) (int, int) { // вторые скобки в функции - сигнатура функции*
	s := (x + y) / 2
	return s + 2, s - 2
}

// возвращение разных типов
func multiTypes(a, b float64) (float64, error) { // float64** позволит вывести десятичное число
	if b == 0 {
		return 0, errors.New("division by zero") //Если b имеет значение 0, то возвращается 0 и новая ошибка "Деление на 0".
	}
	result := a / b
	return result, nil //возвращение деления a на b (если b не равно 0), и пустого типа nil.
}

/*
Сигнатура функции* - используется для определеия возвращаемых типов функции.
Она состоит из списка параметров функции и их типов, а также списка возвращаемых типов.
Сигнатура помещается сразу после списка параметров и предшествуют телу фукнции (если оно есть).
Не обязательно, чтобы сигнатура функции состояла лишь со скобок, например:

	func add(a, b int) int {
	    return a + b
	}

В этом примере, сигнатурой является возвращаемый тип функции int, что находится после скобок.
*/

/*
float64** - может хранить в себе гораздо большие десятичные числа с большей точностью, нежели это делал бы float32.
float32 лучше применять когда десятичное число будет не большим и точность не так важна.
*/
